#pragma once
#ifndef IBinarySerializer_H_
#define IBinarySerializer_H_

#include <vector>

namespace io {
namespace codegen {
namespace {{namespace_name}} {

/*!
 * @brief interface for binary serialization
*/
class IBinarySerializer
{
public:
    IBinarySerializer() = default;
    virtual ~IBinarySerializer() = default;
    /*!
     * @brief Serialization object to binary format
     * @return byte array
    */
    virtual std::vector<uint8_t> ToBinary() const = 0;
    /*!
     * @brief Deserialization from binary format
     * @param data_in byte array (serialized object)
     * @return successful/unsuccessful operation
    */
    virtual bool FromBinary(const std::vector<uint8_t>& data_in) = 0;
};

} // {{namespace_name}}
} // codegen
} // io

#endif /* IBinarySerializer_H_ */